<?php return array (
  'preserve_keys' => false,
  'update_object' => true,
  'unique_key' => 'name',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"renderresources-1.0.1-pl\\/modSnippet\\/0b3af496560e1109500368f3c53b1f08\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"renderresources"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '18914328b3d2fa50212c12eb9e6307f7',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '0b3af496560e1109500368f3c53b1f08',
  'native_key' => NULL,
  'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"renderResources","description":"<strong>1.0.1-pl<\\/strong> A snippet for MODx Revolution to render the output from a collection of Resources","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * renderResources\\n *\\n * A snippet for MODX 2.x that renders the output of a collection of Resources.\\n *\\n * @author Jason Coward\\n * @copyright Copyright 2012, Jason Coward\\n *\\n * TEMPLATES\\n *\\n * tpl - Name of a chunk serving as a wrapper template for resources\\n * [NOTE: if not provided, the output is not wrapped]\\n * tplOdd - (Opt) Name of a chunk serving as a wrapper template for resources with an odd idx value\\n * (see idx property)\\n * tplFirst - (Opt) Name of a chunk serving as a wrapper template for the first resource (see first\\n * property)\\n * tplLast - (Opt) Name of a chunk serving as a wrapper template for the last resource (see last\\n * property)\\n * tpl_{n} - (Opt) Name of a chunk serving as wrapper template for the nth resource\\n *\\n * SELECTION\\n *\\n * parents - Comma-delimited list of ids serving as parents\\n *\\n * contexts - (Opt) Comma-delimited list of context keys to limit results by; if empty, contexts for all specified\\n * parents will be used (all contexts if 0 is specified) [default=]\\n * \\n * depth - (Opt) Integer value indicating depth to search for resources from each parent [default=10]\\n *\\n * tvFilters - (Opt) Delimited-list of TemplateVar values to filter resources by. Supports two\\n * delimiters and two value search formats. THe first delimiter || represents a logical OR and the\\n * primary grouping mechanism.  Within each group you can provide a comma-delimited list of values.\\n * These values can be either tied to a specific TemplateVar by name, e.g. myTV==value, or just the\\n * value, indicating you are searching for the value in any TemplateVar tied to the Resource. An\\n * example would be &tvFilters=`filter2==one,filter1==bar%||filter1==foo`\\n * [NOTE: filtering by values uses a LIKE query and % is considered a wildcard.]\\n * [NOTE: this only looks at the raw value set for specific Resource, i. e. there must be a value\\n * specifically set for the Resource and it is not evaluated.]\\n *\\n * where - (Opt) A JSON expression of criteria to build any additional where clauses from. An example would be\\n * &where=`{{\\"alias:LIKE\\":\\"foo%\\", \\"OR:alias:LIKE\\":\\"%bar\\"},{\\"OR:pagetitle:=\\":\\"foobar\\", \\"AND:description:=\\":\\"raboof\\"}}`\\n *\\n * sortby - (Opt) Field to sort by or a JSON array, e.g. {\\"publishedon\\":\\"ASC\\",\\"createdon\\":\\"DESC\\"} [default=publishedon]\\n * sortbyTV - (opt) A Template Variable name to sort by (if supplied, this precedes the sortby value) [default=]\\n * sortbyTVType - (Opt) A data type to CAST a TV Value to in order to sort on it properly [default=string]\\n * sortbyAlias - (Opt) Query alias for sortby field [default=]\\n * sortbyEscaped - (Opt) Escapes the field name(s) specified in sortby [default=0]\\n * sortdir - (Opt) Order which to sort by [default=DESC]\\n * sortdirTV - (Opt) Order which to sort by a TV [default=DESC]\\n * limit - (Opt) Limits the number of resources returned [default=5]\\n * offset - (Opt) An offset of resources returned by the criteria to skip [default=0]\\n * dbCacheFlag - (Opt) Controls caching of db queries; 0|false = do not cache result set; 1 = cache result set\\n * according to cache settings, any other integer value = number of seconds to cache result set [default=0]\\n *\\n * OPTIONS\\n *\\n * idx - (Opt) You can define the starting idx of the resources, which is an property that is\\n * incremented as each resource is rendered [default=1]\\n * first - (Opt) Define the idx which represents the first resource (see tplFirst) [default=1]\\n * last - (Opt) Define the idx which represents the last resource (see tplLast) [default=# of\\n * resources being summarized + first - 1]\\n * outputSeparator - (Opt) An optional string to separate each tpl instance [default=\\"\\\\n\\"]\\n *\\n *\\/\\nif (!function_exists(\'getDivisors\')) {\\n    function getDivisors($integer) {\\n        $divisors = array();\\n        for ($i = $integer; $i > 1; $i--) {\\n            if (($integer % $i) === 0) {\\n                $divisors[] = $i;\\n            }\\n        }\\n        return $divisors;\\n    }\\n}\\n\\n$output = array();\\n$outputSeparator = isset($outputSeparator) ? $outputSeparator : \\"\\\\n\\";\\n\\n\\/* set default properties *\\/\\n$tpl = !empty($tpl) ? $tpl : \'\';\\n\\n$parents = (!empty($parents) || $parents === \'0\') ? explode(\',\', $parents) : array($modx->resource->get(\'id\'));\\narray_walk($parents, \'trim\');\\n$parents = array_unique($parents);\\n$depth = isset($depth) ? (integer) $depth : 10;\\n\\n$tvFilters = !empty($tvFilters) ? explode(\'||\', $tvFilters) : array();\\n\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$showUnpublished = !empty($showUnpublished) ? true : false;\\n$showDeleted = !empty($showDeleted) ? true : false;\\n\\n$sortby = isset($sortby) ? $sortby : \'publishedon\';\\n$sortbyTV = isset($sortbyTV) ? $sortbyTV : \'\';\\n$sortbyAlias = isset($sortbyAlias) ? $sortbyAlias : \'modResource\';\\n$sortbyEscaped = !empty($sortbyEscaped) ? true : false;\\n$sortdir = isset($sortdir) ? $sortdir : \'DESC\';\\n$sortdirTV = isset($sortdirTV) ? $sortdirTV : \'DESC\';\\n$limit = isset($limit) ? (integer) $limit : 5;\\n$offset = isset($offset) ? (integer) $offset : 0;\\n$totalVar = !empty($totalVar) ? $totalVar : \'total\';\\n\\n$dbCacheFlag = !isset($dbCacheFlag) ? false : $dbCacheFlag;\\nif (is_string($dbCacheFlag) || is_numeric($dbCacheFlag)) {\\n    if ($dbCacheFlag == \'0\') {\\n        $dbCacheFlag = false;\\n    } elseif ($dbCacheFlag == \'1\') {\\n        $dbCacheFlag = true;\\n    } else {\\n        $dbCacheFlag = (integer) $dbCacheFlag;\\n    }\\n}\\n\\n\\/* multiple context support *\\/\\n$contextArray = array();\\n$contextSpecified = false;\\nif (!empty($context)) {\\n    $contextArray = explode(\',\',$context);\\n    array_walk($contextArray, \'trim\');\\n    $contexts = array();\\n    foreach ($contextArray as $ctx) {\\n        $contexts[] = $modx->quote($ctx);\\n    }\\n    $context = implode(\',\',$contexts);\\n    $contextSpecified = true;\\n    unset($contexts,$ctx);\\n} else {\\n    $context = $modx->quote($modx->context->get(\'key\'));\\n}\\n\\n$pcMap = array();\\n$pcQuery = $modx->newQuery(\'modResource\', array(\'id:IN\' => $parents), $dbCacheFlag);\\n$pcQuery->select(array(\'id\', \'context_key\'));\\nif ($pcQuery->prepare() && $pcQuery->stmt->execute()) {\\n    foreach ($pcQuery->stmt->fetchAll(PDO::FETCH_ASSOC) as $pcRow) {\\n        $pcMap[(integer) $pcRow[\'id\']] = $pcRow[\'context_key\'];\\n    }\\n}\\n\\n$children = array();\\n$parentArray = array();\\nforeach ($parents as $parent) {\\n    $parent = (integer) $parent;\\n    if ($parent === 0) {\\n        $pchildren = array();\\n        if ($contextSpecified) {\\n            foreach ($contextArray as $pCtx) {\\n                if (!in_array($pCtx, $contextArray)) {\\n                    continue;\\n                }\\n                $options = $pCtx !== $modx->context->get(\'key\') ? array(\'context\' => $pCtx) : array();\\n                $pcchildren = $modx->getChildIds($parent, $depth, $options);\\n                if (!empty($pcchildren)) $pchildren = array_merge($pchildren, $pcchildren);\\n            }\\n        } else {\\n            $cQuery = $modx->newQuery(\'modContext\', array(\'key:!=\' => \'mgr\'));\\n            $cQuery->select(array(\'key\'));\\n            if ($cQuery->prepare() && $cQuery->stmt->execute()) {\\n                foreach ($cQuery->stmt->fetchAll(PDO::FETCH_COLUMN) as $pCtx) {\\n                    $options = $pCtx !== $modx->context->get(\'key\') ? array(\'context\' => $pCtx) : array();\\n                    $pcchildren = $modx->getChildIds($parent, $depth, $options);\\n                    if (!empty($pcchildren)) $pchildren = array_merge($pchildren, $pcchildren);\\n                }\\n            }\\n        }\\n        $parentArray[] = $parent;\\n    } else {\\n        $pContext = array_key_exists($parent, $pcMap) ? $pcMap[$parent] : false;\\n        if ($debug) $modx->log(modX::LOG_LEVEL_ERROR, \\"context for {$parent} is {$pContext}\\");\\n        if ($pContext && $contextSpecified && !in_array($pContext, $contextArray, true)) {\\n            $parent = next($parents);\\n            continue;\\n        }\\n        $parentArray[] = $parent;\\n        $options = !empty($pContext) && $pContext !== $modx->context->get(\'key\') ? array(\'context\' => $pContext) : array();\\n        $pchildren = $modx->getChildIds($parent, $depth, $options);\\n    }\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n    $parent = next($parents);\\n}\\n$parents = array_merge($parentArray, $children);\\n\\n$criteria = array(\\"modResource.parent IN (\\" . implode(\',\', $parents) . \\")\\");\\nif ($contextSpecified) {\\n    $contextResourceTbl = $modx->getTableName(\'modContextResource\');\\n    $criteria[] = \\"(modResource.context_key IN ({$context}) OR EXISTS(SELECT 1 FROM {$contextResourceTbl} ctx WHERE ctx.resource = modResource.id AND ctx.context_key IN ({$context})))\\";\\n}\\nif (empty($showDeleted)) {\\n    $criteria[\'deleted\'] = \'0\';\\n}\\nif (empty($showUnpublished)) {\\n    $criteria[\'published\'] = \'1\';\\n}\\nif (empty($showHidden)) {\\n    $criteria[\'hidemenu\'] = \'0\';\\n}\\nif (!empty($hideContainers)) {\\n    $criteria[\'isfolder\'] = \'0\';\\n}\\n$criteria[\'class_key:IN\'] = array(\'modDocument\', \'modStaticResource\');\\n\\/** @var xPDOQuery $criteria *\\/\\n$criteria = $modx->newQuery(\'modResource\', $criteria);\\n$criteria->innerJoin(\'modContentType\', \'ContentType\', array(\'ContentType.binary\' => false, \\"ContentType.id = modResource.content_type\\"));\\nif (!empty($tvFilters)) {\\n    $tmplVarTbl = $modx->getTableName(\'modTemplateVar\');\\n    $tmplVarResourceTbl = $modx->getTableName(\'modTemplateVarResource\');\\n    $conditions = array();\\n    $operators = array(\\n        \'<=>\' => \'<=>\',\\n        \'===\' => \'=\',\\n        \'!==\' => \'!=\',\\n        \'<>\' => \'<>\',\\n        \'==\' => \'LIKE\',\\n        \'!=\' => \'NOT LIKE\',\\n        \'<<\' => \'<\',\\n        \'<=\' => \'<=\',\\n        \'=<\' => \'=<\',\\n        \'>>\' => \'>\',\\n        \'>=\' => \'>=\',\\n        \'=>\' => \'=>\'\\n    );\\n    foreach ($tvFilters as $fGroup => $tvFilter) {\\n        $filterGroup = array();\\n        $filters = explode(\',\', $tvFilter);\\n        $multiple = count($filters) > 0;\\n        foreach ($filters as $filter) {\\n            $operator = \'==\';\\n            $sqlOperator = \'LIKE\';\\n            foreach ($operators as $op => $opSymbol) {\\n                if (strpos($filter, $op, 1) !== false) {\\n                    $operator = $op;\\n                    $sqlOperator = $opSymbol;\\n                    break;\\n                }\\n            }\\n            $tvValueField = \'tvr.value\';\\n            $tvDefaultField = \'tv.default_text\';\\n            $f = explode($operator, $filter);\\n            if (count($f) == 2) {\\n                $tvName = $modx->quote($f[0]);\\n                if (is_numeric($f[1]) && !in_array($sqlOperator, array(\'LIKE\', \'NOT LIKE\'))) {\\n                    $tvValue = $f[1];\\n                    if ($f[1] == (integer)$f[1]) {\\n                        $tvValueField = \\"CAST({$tvValueField} AS SIGNED INTEGER)\\";\\n                        $tvDefaultField = \\"CAST({$tvDefaultField} AS SIGNED INTEGER)\\";\\n                    } else {\\n                        $tvValueField = \\"CAST({$tvValueField} AS DECIMAL)\\";\\n                        $tvDefaultField = \\"CAST({$tvDefaultField} AS DECIMAL)\\";\\n                    }\\n                } else {\\n                    $tvValue = $modx->quote($f[1]);\\n                }\\n                if ($multiple) {\\n                    $filterGroup[] =\\n                        \\"(EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.name = {$tvName} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id) \\" .\\n                        \\"OR EXISTS (SELECT 1 FROM {$tmplVarTbl} tv WHERE tv.name = {$tvName} AND {$tvDefaultField} {$sqlOperator} {$tvValue} AND tv.id NOT IN (SELECT tmplvarid FROM {$tmplVarResourceTbl} WHERE contentid = modResource.id)) \\" .\\n                        \\")\\";\\n                } else {\\n                    $filterGroup =\\n                        \\"(EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.name = {$tvName} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id) \\" .\\n                        \\"OR EXISTS (SELECT 1 FROM {$tmplVarTbl} tv WHERE tv.name = {$tvName} AND {$tvDefaultField} {$sqlOperator} {$tvValue} AND tv.id NOT IN (SELECT tmplvarid FROM {$tmplVarResourceTbl} WHERE contentid = modResource.id)) \\" .\\n                        \\")\\";\\n                }\\n            } elseif (count($f) == 1) {\\n                $tvValue = $modx->quote($f[0]);\\n                if ($multiple) {\\n                    $filterGroup[] = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id)\\";\\n                } else {\\n                    $filterGroup = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id)\\";\\n                }\\n            }\\n        }\\n        $conditions[] = $filterGroup;\\n    }\\n    if (!empty($conditions)) {\\n        $firstGroup = true;\\n        foreach ($conditions as $cGroup => $c) {\\n            if (is_array($c)) {\\n                $first = true;\\n                foreach ($c as $cond) {\\n                    if ($first && !$firstGroup) {\\n                        $criteria->condition($criteria->query[\'where\'][0][1], $cond, xPDOQuery::SQL_OR, null, $cGroup);\\n                    } else {\\n                        $criteria->condition($criteria->query[\'where\'][0][1], $cond, xPDOQuery::SQL_AND, null, $cGroup);\\n                    }\\n                    $first = false;\\n                }\\n            } else {\\n                $criteria->condition($criteria->query[\'where\'][0][1], $c, $firstGroup ? xPDOQuery::SQL_AND : xPDOQuery::SQL_OR, null, $cGroup);\\n            }\\n            $firstGroup = false;\\n        }\\n    }\\n}\\n\\/* include\\/exclude resources, via &resources=`123,-456` prop *\\/\\nif (!empty($resources)) {\\n    $resourceConditions = array();\\n    $resources = explode(\',\',$resources);\\n    $include = array();\\n    $exclude = array();\\n    foreach ($resources as $resource) {\\n        $resource = (int)$resource;\\n        if ($resource == 0) continue;\\n        if ($resource < 0) {\\n            $exclude[] = abs($resource);\\n        } else {\\n            $include[] = $resource;\\n        }\\n    }\\n    if (!empty($include)) {\\n        $criteria->where(array(\'OR:modResource.id:IN\' => $include), xPDOQuery::SQL_OR);\\n    }\\n    if (!empty($exclude)) {\\n        $criteria->where(array(\'modResource.id:NOT IN\' => $exclude), xPDOQuery::SQL_AND, null, 1);\\n    }\\n}\\nif (!empty($where)) {\\n    $criteria->where($where);\\n}\\n\\nif (!empty($sortbyTV)) {\\n    $criteria->leftJoin(\'modTemplateVar\', \'tvDefault\', array(\\n        \\"tvDefault.name\\" => $sortbyTV\\n    ));\\n    $criteria->leftJoin(\'modTemplateVarResource\', \'tvSort\', array(\\n        \\"tvSort.contentid = modResource.id\\",\\n        \\"tvSort.tmplvarid = tvDefault.id\\"\\n    ));\\n    if (empty($sortbyTVType)) $sortbyTVType = \'string\';\\n    if ($modx->getOption(\'dbtype\') === \'mysql\') {\\n        switch ($sortbyTVType) {\\n            case \'integer\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS SIGNED INTEGER) AS sortTV\\");\\n                break;\\n            case \'decimal\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS DECIMAL) AS sortTV\\");\\n                break;\\n            case \'datetime\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS DATETIME) AS sortTV\\");\\n                break;\\n            case \'string\':\\n            default:\\n                $criteria->select(\\"IFNULL(tvSort.value, tvDefault.default_text) AS sortTV\\");\\n                break;\\n        }\\n    } elseif ($modx->getOption(\'dbtype\') === \'sqlsrv\') {\\n        switch ($sortbyTVType) {\\n            case \'integer\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS BIGINT) AS sortTV\\");\\n                break;\\n            case \'decimal\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS DECIMAL) AS sortTV\\");\\n                break;\\n            case \'datetime\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS DATETIME) AS sortTV\\");\\n                break;\\n            case \'string\':\\n            default:\\n                $criteria->select(\\"ISNULL(tvSort.value, tvDefault.default_text) AS sortTV\\");\\n                break;\\n        }\\n    }\\n    $criteria->sortby(\\"sortTV\\", $sortdirTV);\\n}\\nif (!empty($sortby)) {\\n    if (strpos($sortby, \'{\') === 0) {\\n        $sorts = $modx->fromJSON($sortby);\\n    } else {\\n        $sorts = array($sortby => $sortdir);\\n    }\\n    if (is_array($sorts)) {\\n        while (list($sort, $dir) = each($sorts)) {\\n            if ($sortbyEscaped) $sort = $modx->escape($sort);\\n            if (!empty($sortbyAlias)) $sort = $modx->escape($sortbyAlias) . \\".{$sort}\\";\\n            $criteria->sortby($sort, $dir);\\n        }\\n    }\\n}\\n\\n$total = $modx->getCount(\'modResource\', $criteria);\\n$modx->setPlaceholder($totalVar, $total);\\n\\n\\nif (!empty($limit)) $criteria->limit($limit, $offset);\\n\\nif (!empty($debug)) {\\n    $criteria->prepare();\\n    $modx->log(modX::LOG_LEVEL_ERROR, $criteria->toSQL());\\n}\\n$collection = $modx->getCollection(\'modResource\', $criteria, $dbCacheFlag);\\n\\n$idx = !empty($idx) && $idx !== \'0\' ? (integer) $idx : 1;\\n$first = empty($first) && $first !== \'0\' ? 1 : (integer) $first;\\n$last = empty($last) ? (count($collection) + $idx - 1) : (integer) $last;\\n\\n$maxIterations = empty($maxIterations) || (integer) $maxIterations < 1 ? 10 : (integer) $maxIterations;\\n$currentResource = $modx->resource;\\n$currentResourceIdentifier = $modx->resourceIdentifier;\\n$currentElementCache = $modx->elementCache;\\n\\n\\/** @var modResource $resource *\\/\\nforeach ($collection as $resourceId => $resource) {\\n    $odd = ($idx & 1);\\n    $properties = array_merge(\\n        $scriptProperties\\n        ,array(\\n            \'idx\' => $idx\\n            ,\'first\' => $first\\n            ,\'last\' => $last\\n        )\\n    );\\n    $resourceTpl = null;\\n    $tplidx = \'tpl_\' . $idx;\\n    if (!empty($$tplidx)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $$tplidx);\\n    }\\n    if ($idx > 1 && $resourceTpl === null) {\\n        $divisors = getDivisors($idx);\\n        if (!empty($divisors)) {\\n            foreach ($divisors as $divisor) {\\n                $tplnth = \'tpl_n\' . $divisor;\\n                if (!empty($$tplnth)) {\\n                    $resourceTpl = $modx->parser->getElement(\'modChunk\', $$tplnth);\\n                    if ($resourceTpl !== null) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    if ($idx == $first && $resourceTpl === null && !empty($tplFirst)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplFirst);\\n    }\\n    if ($idx == $last && $resourceTpl === null && !empty($tplLast)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplLast);\\n    }\\n    if ($odd && $resourceTpl === null && !empty($tplOdd)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplOdd);\\n    }\\n    if (!empty($tpl) && $resourceTpl === null) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tpl);\\n    }\\n\\n    $modx->resource = $resource;\\n    $modx->resourceIdentifier = $resource->get(\'id\');\\n    $modx->elementCache = array();\\n    $resourceOutput = $modx->resource->process();\\n    $modx->parser->processElementTags(\'\', $resourceOutput, true, false, \'[[\', \']]\', array(), $maxIterations);\\n    $modx->parser->processElementTags(\'\', $resourceOutput, true, true, \'[[\', \']]\', array(), $maxIterations);\\n\\n    if (empty($resourceTpl)) {\\n        $output[]= $resourceOutput;\\n    } else {\\n        $output[]= $resourceTpl->process(array_merge($properties, array(\'output\' => $resourceOutput)));\\n    }\\n    $idx++;\\n}\\n\\n$modx->elementCache = $currentElementCache;\\n$modx->resourceIdentifier = $currentResourceIdentifier;\\n$modx->resource = $currentResource;\\n\\n\\/* output *\\/\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\',$scriptProperties,false);\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->setPlaceholders($output,$toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\n$output = implode($outputSeparator, $output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:29:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:113:\\"Name of a chunk serving as a wrapper template for the resource. NOTE: if not provided, the output is not wrapped.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:6:\\"tplOdd\\";a:7:{s:4:\\"name\\";s:6:\\"tplOdd\\";s:4:\\"desc\\";s:101:\\"Name of a chunk serving as a wrapper template for resources with an odd idx value (see idx property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:8:\\"tplFirst\\";a:7:{s:4:\\"name\\";s:8:\\"tplFirst\\";s:4:\\"desc\\";s:88:\\"Name of a chunk serving as wrapper template for the first resource (see first property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:7:\\"tplLast\\";a:7:{s:4:\\"name\\";s:7:\\"tplLast\\";s:4:\\"desc\\";s:86:\\"Name of a chunk serving as wrapper template for the last resource (see last property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortby\\";a:7:{s:4:\\"name\\";s:6:\\"sortby\\";s:4:\\"desc\\";s:153:\\"A field name to sort by or JSON object of field names and sortdir for each field, e.g. {\\"publishedon\\":\\"ASC\\",\\"createdon\\":\\"DESC\\"}. Defaults to publishedon.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:8:\\"sortbyTV\\";a:7:{s:4:\\"name\\";s:8:\\"sortbyTV\\";s:4:\\"desc\\";s:65:\\"Name of a Template Variable to sort by. Defaults to empty string.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:12:\\"sortbyTVType\\";a:7:{s:4:\\"name\\";s:12:\\"sortbyTVType\\";s:4:\\"desc\\";s:72:\\"An optional type to indicate how to sort on the Template Variable value.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:6:\\"string\\";s:5:\\"value\\";s:6:\\"string\\";}i:1;a:2:{s:4:\\"text\\";s:7:\\"integer\\";s:5:\\"value\\";s:7:\\"integer\\";}i:2;a:2:{s:4:\\"text\\";s:7:\\"decimal\\";s:5:\\"value\\";s:7:\\"decimal\\";}i:3;a:2:{s:4:\\"text\\";s:8:\\"datetime\\";s:5:\\"value\\";s:8:\\"datetime\\";}}s:5:\\"value\\";s:6:\\"string\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:11:\\"sortbyAlias\\";a:7:{s:4:\\"name\\";s:11:\\"sortbyAlias\\";s:4:\\"desc\\";s:58:\\"Query alias for sortby field. Defaults to an empty string.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:13:\\"sortbyEscaped\\";a:7:{s:4:\\"name\\";s:13:\\"sortbyEscaped\\";s:4:\\"desc\\";s:82:\\"Determines if the field name specified in sortby should be escaped. Defaults to 0.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:7:\\"sortdir\\";a:7:{s:4:\\"name\\";s:7:\\"sortdir\\";s:4:\\"desc\\";s:41:\\"Order which to sort by. Defaults to DESC.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"ASC\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"DESC\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"sortdirTV\\";a:7:{s:4:\\"name\\";s:9:\\"sortdirTV\\";s:4:\\"desc\\";s:61:\\"Order which to sort a Template Variable by. Defaults to DESC.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"ASC\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"DESC\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"limit\\";a:7:{s:4:\\"name\\";s:5:\\"limit\\";s:4:\\"desc\\";s:55:\\"Limits the number of resources returned. Defaults to 5.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"5\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:6:\\"offset\\";a:7:{s:4:\\"name\\";s:6:\\"offset\\";s:4:\\"desc\\";s:56:\\"An offset of resources returned by the criteria to skip.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tvFilters\\";a:7:{s:4:\\"name\\";s:9:\\"tvFilters\\";s:4:\\"desc\\";s:778:\\"Delimited-list of TemplateVar values to filter resources by. Supports two delimiters and two value search formats. THe first delimiter || represents a logical OR and the primary grouping mechanism.  Within each group you can provide a comma-delimited list of values. These values can be either tied to a specific TemplateVar by name, e.g. myTV==value, or just the value, indicating you are searching for the value in any TemplateVar tied to the Resource. An example would be &tvFilters=`filter2==one,filter1==bar%||filter1==foo`. <br \\/>NOTE: filtering by values uses a LIKE query and % is considered a wildcard. <br \\/>ANOTHER NOTE: This only looks at the raw value set for specific Resource, i. e. there must be a value specifically set for the Resource and it is not evaluated.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"depth\\";a:7:{s:4:\\"name\\";s:5:\\"depth\\";s:4:\\"desc\\";s:88:\\"Integer value indicating depth to search for resources from each parent. Defaults to 10.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:7:\\"parents\\";a:7:{s:4:\\"name\\";s:7:\\"parents\\";s:4:\\"desc\\";s:57:\\"Optional. Comma-delimited list of ids serving as parents.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:10:\\"showHidden\\";a:7:{s:4:\\"name\\";s:10:\\"showHidden\\";s:4:\\"desc\\";s:85:\\"Indicates if Resources that are hidden from menus should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:15:\\"showUnpublished\\";a:7:{s:4:\\"name\\";s:15:\\"showUnpublished\\";s:4:\\"desc\\";s:79:\\"Indicates if Resources that are unpublished should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:11:\\"showDeleted\\";a:7:{s:4:\\"name\\";s:11:\\"showDeleted\\";s:4:\\"desc\\";s:75:\\"Indicates if Resources that are deleted should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"resources\\";a:7:{s:4:\\"name\\";s:9:\\"resources\\";s:4:\\"desc\\";s:177:\\"A comma-separated list of resource IDs to exclude or include. IDs with a - in front mean to exclude. Ex: 123,-456 means to include Resource 123, but always exclude Resource 456.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:3:\\"idx\\";a:7:{s:4:\\"name\\";s:3:\\"idx\\";s:4:\\"desc\\";s:120:\\"You can define the starting idx of the resources, which is an property that is incremented as each resource is rendered.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"first\\";a:7:{s:4:\\"name\\";s:5:\\"first\\";s:4:\\"desc\\";s:81:\\"Define the idx which represents the first resource (see tplFirst). Defaults to 1.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:4:\\"last\\";a:7:{s:4:\\"name\\";s:4:\\"last\\";s:4:\\"desc\\";s:129:\\"Define the idx which represents the last resource (see tplLast). Defaults to the number of resources being summarized + first - 1\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:85:\\"If set, will assign the result to this placeholder instead of outputting it directly.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:22:\\"toSeparatePlaceholders\\";a:7:{s:4:\\"name\\";s:22:\\"toSeparatePlaceholders\\";s:4:\\"desc\\";s:130:\\"If set, will assign EACH result to a separate placeholder named by this param suffixed with a sequential number (starting from 0).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"debug\\";a:7:{s:4:\\"name\\";s:5:\\"debug\\";s:4:\\"desc\\";s:68:\\"If true, will send the SQL query to the MODX log. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:193:\\"A JSON expression of criteria to build any additional where clauses from, e.g. &where=`{{\\"alias:LIKE\\":\\"foo%\\", \\"OR:alias:LIKE\\":\\"%bar\\"},{\\"OR:pagetitle:=\\":\\"foobar\\", \\"AND:description:=\\":\\"raboof\\"}}`\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:11:\\"dbCacheFlag\\";a:7:{s:4:\\"name\\";s:11:\\"dbCacheFlag\\";s:4:\\"desc\\";s:218:\\"Determines how result sets are cached if cache_db is enabled in MODX. 0|false = do not cache result set; 1 = cache result set according to cache settings, any other integer value = number of seconds to cache result set\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:7:\\"context\\";a:7:{s:4:\\"name\\";s:7:\\"context\\";s:4:\\"desc\\";s:116:\\"A comma-delimited list of context keys for limiting results. Default is empty, i.e. do not limit results by context.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * renderResources\\n *\\n * A snippet for MODX 2.x that renders the output of a collection of Resources.\\n *\\n * @author Jason Coward\\n * @copyright Copyright 2012, Jason Coward\\n *\\n * TEMPLATES\\n *\\n * tpl - Name of a chunk serving as a wrapper template for resources\\n * [NOTE: if not provided, the output is not wrapped]\\n * tplOdd - (Opt) Name of a chunk serving as a wrapper template for resources with an odd idx value\\n * (see idx property)\\n * tplFirst - (Opt) Name of a chunk serving as a wrapper template for the first resource (see first\\n * property)\\n * tplLast - (Opt) Name of a chunk serving as a wrapper template for the last resource (see last\\n * property)\\n * tpl_{n} - (Opt) Name of a chunk serving as wrapper template for the nth resource\\n *\\n * SELECTION\\n *\\n * parents - Comma-delimited list of ids serving as parents\\n *\\n * contexts - (Opt) Comma-delimited list of context keys to limit results by; if empty, contexts for all specified\\n * parents will be used (all contexts if 0 is specified) [default=]\\n * \\n * depth - (Opt) Integer value indicating depth to search for resources from each parent [default=10]\\n *\\n * tvFilters - (Opt) Delimited-list of TemplateVar values to filter resources by. Supports two\\n * delimiters and two value search formats. THe first delimiter || represents a logical OR and the\\n * primary grouping mechanism.  Within each group you can provide a comma-delimited list of values.\\n * These values can be either tied to a specific TemplateVar by name, e.g. myTV==value, or just the\\n * value, indicating you are searching for the value in any TemplateVar tied to the Resource. An\\n * example would be &tvFilters=`filter2==one,filter1==bar%||filter1==foo`\\n * [NOTE: filtering by values uses a LIKE query and % is considered a wildcard.]\\n * [NOTE: this only looks at the raw value set for specific Resource, i. e. there must be a value\\n * specifically set for the Resource and it is not evaluated.]\\n *\\n * where - (Opt) A JSON expression of criteria to build any additional where clauses from. An example would be\\n * &where=`{{\\"alias:LIKE\\":\\"foo%\\", \\"OR:alias:LIKE\\":\\"%bar\\"},{\\"OR:pagetitle:=\\":\\"foobar\\", \\"AND:description:=\\":\\"raboof\\"}}`\\n *\\n * sortby - (Opt) Field to sort by or a JSON array, e.g. {\\"publishedon\\":\\"ASC\\",\\"createdon\\":\\"DESC\\"} [default=publishedon]\\n * sortbyTV - (opt) A Template Variable name to sort by (if supplied, this precedes the sortby value) [default=]\\n * sortbyTVType - (Opt) A data type to CAST a TV Value to in order to sort on it properly [default=string]\\n * sortbyAlias - (Opt) Query alias for sortby field [default=]\\n * sortbyEscaped - (Opt) Escapes the field name(s) specified in sortby [default=0]\\n * sortdir - (Opt) Order which to sort by [default=DESC]\\n * sortdirTV - (Opt) Order which to sort by a TV [default=DESC]\\n * limit - (Opt) Limits the number of resources returned [default=5]\\n * offset - (Opt) An offset of resources returned by the criteria to skip [default=0]\\n * dbCacheFlag - (Opt) Controls caching of db queries; 0|false = do not cache result set; 1 = cache result set\\n * according to cache settings, any other integer value = number of seconds to cache result set [default=0]\\n *\\n * OPTIONS\\n *\\n * idx - (Opt) You can define the starting idx of the resources, which is an property that is\\n * incremented as each resource is rendered [default=1]\\n * first - (Opt) Define the idx which represents the first resource (see tplFirst) [default=1]\\n * last - (Opt) Define the idx which represents the last resource (see tplLast) [default=# of\\n * resources being summarized + first - 1]\\n * outputSeparator - (Opt) An optional string to separate each tpl instance [default=\\"\\\\n\\"]\\n *\\n *\\/\\nif (!function_exists(\'getDivisors\')) {\\n    function getDivisors($integer) {\\n        $divisors = array();\\n        for ($i = $integer; $i > 1; $i--) {\\n            if (($integer % $i) === 0) {\\n                $divisors[] = $i;\\n            }\\n        }\\n        return $divisors;\\n    }\\n}\\n\\n$output = array();\\n$outputSeparator = isset($outputSeparator) ? $outputSeparator : \\"\\\\n\\";\\n\\n\\/* set default properties *\\/\\n$tpl = !empty($tpl) ? $tpl : \'\';\\n\\n$parents = (!empty($parents) || $parents === \'0\') ? explode(\',\', $parents) : array($modx->resource->get(\'id\'));\\narray_walk($parents, \'trim\');\\n$parents = array_unique($parents);\\n$depth = isset($depth) ? (integer) $depth : 10;\\n\\n$tvFilters = !empty($tvFilters) ? explode(\'||\', $tvFilters) : array();\\n\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$showUnpublished = !empty($showUnpublished) ? true : false;\\n$showDeleted = !empty($showDeleted) ? true : false;\\n\\n$sortby = isset($sortby) ? $sortby : \'publishedon\';\\n$sortbyTV = isset($sortbyTV) ? $sortbyTV : \'\';\\n$sortbyAlias = isset($sortbyAlias) ? $sortbyAlias : \'modResource\';\\n$sortbyEscaped = !empty($sortbyEscaped) ? true : false;\\n$sortdir = isset($sortdir) ? $sortdir : \'DESC\';\\n$sortdirTV = isset($sortdirTV) ? $sortdirTV : \'DESC\';\\n$limit = isset($limit) ? (integer) $limit : 5;\\n$offset = isset($offset) ? (integer) $offset : 0;\\n$totalVar = !empty($totalVar) ? $totalVar : \'total\';\\n\\n$dbCacheFlag = !isset($dbCacheFlag) ? false : $dbCacheFlag;\\nif (is_string($dbCacheFlag) || is_numeric($dbCacheFlag)) {\\n    if ($dbCacheFlag == \'0\') {\\n        $dbCacheFlag = false;\\n    } elseif ($dbCacheFlag == \'1\') {\\n        $dbCacheFlag = true;\\n    } else {\\n        $dbCacheFlag = (integer) $dbCacheFlag;\\n    }\\n}\\n\\n\\/* multiple context support *\\/\\n$contextArray = array();\\n$contextSpecified = false;\\nif (!empty($context)) {\\n    $contextArray = explode(\',\',$context);\\n    array_walk($contextArray, \'trim\');\\n    $contexts = array();\\n    foreach ($contextArray as $ctx) {\\n        $contexts[] = $modx->quote($ctx);\\n    }\\n    $context = implode(\',\',$contexts);\\n    $contextSpecified = true;\\n    unset($contexts,$ctx);\\n} else {\\n    $context = $modx->quote($modx->context->get(\'key\'));\\n}\\n\\n$pcMap = array();\\n$pcQuery = $modx->newQuery(\'modResource\', array(\'id:IN\' => $parents), $dbCacheFlag);\\n$pcQuery->select(array(\'id\', \'context_key\'));\\nif ($pcQuery->prepare() && $pcQuery->stmt->execute()) {\\n    foreach ($pcQuery->stmt->fetchAll(PDO::FETCH_ASSOC) as $pcRow) {\\n        $pcMap[(integer) $pcRow[\'id\']] = $pcRow[\'context_key\'];\\n    }\\n}\\n\\n$children = array();\\n$parentArray = array();\\nforeach ($parents as $parent) {\\n    $parent = (integer) $parent;\\n    if ($parent === 0) {\\n        $pchildren = array();\\n        if ($contextSpecified) {\\n            foreach ($contextArray as $pCtx) {\\n                if (!in_array($pCtx, $contextArray)) {\\n                    continue;\\n                }\\n                $options = $pCtx !== $modx->context->get(\'key\') ? array(\'context\' => $pCtx) : array();\\n                $pcchildren = $modx->getChildIds($parent, $depth, $options);\\n                if (!empty($pcchildren)) $pchildren = array_merge($pchildren, $pcchildren);\\n            }\\n        } else {\\n            $cQuery = $modx->newQuery(\'modContext\', array(\'key:!=\' => \'mgr\'));\\n            $cQuery->select(array(\'key\'));\\n            if ($cQuery->prepare() && $cQuery->stmt->execute()) {\\n                foreach ($cQuery->stmt->fetchAll(PDO::FETCH_COLUMN) as $pCtx) {\\n                    $options = $pCtx !== $modx->context->get(\'key\') ? array(\'context\' => $pCtx) : array();\\n                    $pcchildren = $modx->getChildIds($parent, $depth, $options);\\n                    if (!empty($pcchildren)) $pchildren = array_merge($pchildren, $pcchildren);\\n                }\\n            }\\n        }\\n        $parentArray[] = $parent;\\n    } else {\\n        $pContext = array_key_exists($parent, $pcMap) ? $pcMap[$parent] : false;\\n        if ($debug) $modx->log(modX::LOG_LEVEL_ERROR, \\"context for {$parent} is {$pContext}\\");\\n        if ($pContext && $contextSpecified && !in_array($pContext, $contextArray, true)) {\\n            $parent = next($parents);\\n            continue;\\n        }\\n        $parentArray[] = $parent;\\n        $options = !empty($pContext) && $pContext !== $modx->context->get(\'key\') ? array(\'context\' => $pContext) : array();\\n        $pchildren = $modx->getChildIds($parent, $depth, $options);\\n    }\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n    $parent = next($parents);\\n}\\n$parents = array_merge($parentArray, $children);\\n\\n$criteria = array(\\"modResource.parent IN (\\" . implode(\',\', $parents) . \\")\\");\\nif ($contextSpecified) {\\n    $contextResourceTbl = $modx->getTableName(\'modContextResource\');\\n    $criteria[] = \\"(modResource.context_key IN ({$context}) OR EXISTS(SELECT 1 FROM {$contextResourceTbl} ctx WHERE ctx.resource = modResource.id AND ctx.context_key IN ({$context})))\\";\\n}\\nif (empty($showDeleted)) {\\n    $criteria[\'deleted\'] = \'0\';\\n}\\nif (empty($showUnpublished)) {\\n    $criteria[\'published\'] = \'1\';\\n}\\nif (empty($showHidden)) {\\n    $criteria[\'hidemenu\'] = \'0\';\\n}\\nif (!empty($hideContainers)) {\\n    $criteria[\'isfolder\'] = \'0\';\\n}\\n$criteria[\'class_key:IN\'] = array(\'modDocument\', \'modStaticResource\');\\n\\/** @var xPDOQuery $criteria *\\/\\n$criteria = $modx->newQuery(\'modResource\', $criteria);\\n$criteria->innerJoin(\'modContentType\', \'ContentType\', array(\'ContentType.binary\' => false, \\"ContentType.id = modResource.content_type\\"));\\nif (!empty($tvFilters)) {\\n    $tmplVarTbl = $modx->getTableName(\'modTemplateVar\');\\n    $tmplVarResourceTbl = $modx->getTableName(\'modTemplateVarResource\');\\n    $conditions = array();\\n    $operators = array(\\n        \'<=>\' => \'<=>\',\\n        \'===\' => \'=\',\\n        \'!==\' => \'!=\',\\n        \'<>\' => \'<>\',\\n        \'==\' => \'LIKE\',\\n        \'!=\' => \'NOT LIKE\',\\n        \'<<\' => \'<\',\\n        \'<=\' => \'<=\',\\n        \'=<\' => \'=<\',\\n        \'>>\' => \'>\',\\n        \'>=\' => \'>=\',\\n        \'=>\' => \'=>\'\\n    );\\n    foreach ($tvFilters as $fGroup => $tvFilter) {\\n        $filterGroup = array();\\n        $filters = explode(\',\', $tvFilter);\\n        $multiple = count($filters) > 0;\\n        foreach ($filters as $filter) {\\n            $operator = \'==\';\\n            $sqlOperator = \'LIKE\';\\n            foreach ($operators as $op => $opSymbol) {\\n                if (strpos($filter, $op, 1) !== false) {\\n                    $operator = $op;\\n                    $sqlOperator = $opSymbol;\\n                    break;\\n                }\\n            }\\n            $tvValueField = \'tvr.value\';\\n            $tvDefaultField = \'tv.default_text\';\\n            $f = explode($operator, $filter);\\n            if (count($f) == 2) {\\n                $tvName = $modx->quote($f[0]);\\n                if (is_numeric($f[1]) && !in_array($sqlOperator, array(\'LIKE\', \'NOT LIKE\'))) {\\n                    $tvValue = $f[1];\\n                    if ($f[1] == (integer)$f[1]) {\\n                        $tvValueField = \\"CAST({$tvValueField} AS SIGNED INTEGER)\\";\\n                        $tvDefaultField = \\"CAST({$tvDefaultField} AS SIGNED INTEGER)\\";\\n                    } else {\\n                        $tvValueField = \\"CAST({$tvValueField} AS DECIMAL)\\";\\n                        $tvDefaultField = \\"CAST({$tvDefaultField} AS DECIMAL)\\";\\n                    }\\n                } else {\\n                    $tvValue = $modx->quote($f[1]);\\n                }\\n                if ($multiple) {\\n                    $filterGroup[] =\\n                        \\"(EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.name = {$tvName} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id) \\" .\\n                        \\"OR EXISTS (SELECT 1 FROM {$tmplVarTbl} tv WHERE tv.name = {$tvName} AND {$tvDefaultField} {$sqlOperator} {$tvValue} AND tv.id NOT IN (SELECT tmplvarid FROM {$tmplVarResourceTbl} WHERE contentid = modResource.id)) \\" .\\n                        \\")\\";\\n                } else {\\n                    $filterGroup =\\n                        \\"(EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.name = {$tvName} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id) \\" .\\n                        \\"OR EXISTS (SELECT 1 FROM {$tmplVarTbl} tv WHERE tv.name = {$tvName} AND {$tvDefaultField} {$sqlOperator} {$tvValue} AND tv.id NOT IN (SELECT tmplvarid FROM {$tmplVarResourceTbl} WHERE contentid = modResource.id)) \\" .\\n                        \\")\\";\\n                }\\n            } elseif (count($f) == 1) {\\n                $tvValue = $modx->quote($f[0]);\\n                if ($multiple) {\\n                    $filterGroup[] = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id)\\";\\n                } else {\\n                    $filterGroup = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} tvr JOIN {$tmplVarTbl} tv ON {$tvValueField} {$sqlOperator} {$tvValue} AND tv.id = tvr.tmplvarid WHERE tvr.contentid = modResource.id)\\";\\n                }\\n            }\\n        }\\n        $conditions[] = $filterGroup;\\n    }\\n    if (!empty($conditions)) {\\n        $firstGroup = true;\\n        foreach ($conditions as $cGroup => $c) {\\n            if (is_array($c)) {\\n                $first = true;\\n                foreach ($c as $cond) {\\n                    if ($first && !$firstGroup) {\\n                        $criteria->condition($criteria->query[\'where\'][0][1], $cond, xPDOQuery::SQL_OR, null, $cGroup);\\n                    } else {\\n                        $criteria->condition($criteria->query[\'where\'][0][1], $cond, xPDOQuery::SQL_AND, null, $cGroup);\\n                    }\\n                    $first = false;\\n                }\\n            } else {\\n                $criteria->condition($criteria->query[\'where\'][0][1], $c, $firstGroup ? xPDOQuery::SQL_AND : xPDOQuery::SQL_OR, null, $cGroup);\\n            }\\n            $firstGroup = false;\\n        }\\n    }\\n}\\n\\/* include\\/exclude resources, via &resources=`123,-456` prop *\\/\\nif (!empty($resources)) {\\n    $resourceConditions = array();\\n    $resources = explode(\',\',$resources);\\n    $include = array();\\n    $exclude = array();\\n    foreach ($resources as $resource) {\\n        $resource = (int)$resource;\\n        if ($resource == 0) continue;\\n        if ($resource < 0) {\\n            $exclude[] = abs($resource);\\n        } else {\\n            $include[] = $resource;\\n        }\\n    }\\n    if (!empty($include)) {\\n        $criteria->where(array(\'OR:modResource.id:IN\' => $include), xPDOQuery::SQL_OR);\\n    }\\n    if (!empty($exclude)) {\\n        $criteria->where(array(\'modResource.id:NOT IN\' => $exclude), xPDOQuery::SQL_AND, null, 1);\\n    }\\n}\\nif (!empty($where)) {\\n    $criteria->where($where);\\n}\\n\\nif (!empty($sortbyTV)) {\\n    $criteria->leftJoin(\'modTemplateVar\', \'tvDefault\', array(\\n        \\"tvDefault.name\\" => $sortbyTV\\n    ));\\n    $criteria->leftJoin(\'modTemplateVarResource\', \'tvSort\', array(\\n        \\"tvSort.contentid = modResource.id\\",\\n        \\"tvSort.tmplvarid = tvDefault.id\\"\\n    ));\\n    if (empty($sortbyTVType)) $sortbyTVType = \'string\';\\n    if ($modx->getOption(\'dbtype\') === \'mysql\') {\\n        switch ($sortbyTVType) {\\n            case \'integer\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS SIGNED INTEGER) AS sortTV\\");\\n                break;\\n            case \'decimal\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS DECIMAL) AS sortTV\\");\\n                break;\\n            case \'datetime\':\\n                $criteria->select(\\"CAST(IFNULL(tvSort.value, tvDefault.default_text) AS DATETIME) AS sortTV\\");\\n                break;\\n            case \'string\':\\n            default:\\n                $criteria->select(\\"IFNULL(tvSort.value, tvDefault.default_text) AS sortTV\\");\\n                break;\\n        }\\n    } elseif ($modx->getOption(\'dbtype\') === \'sqlsrv\') {\\n        switch ($sortbyTVType) {\\n            case \'integer\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS BIGINT) AS sortTV\\");\\n                break;\\n            case \'decimal\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS DECIMAL) AS sortTV\\");\\n                break;\\n            case \'datetime\':\\n                $criteria->select(\\"CAST(ISNULL(tvSort.value, tvDefault.default_text) AS DATETIME) AS sortTV\\");\\n                break;\\n            case \'string\':\\n            default:\\n                $criteria->select(\\"ISNULL(tvSort.value, tvDefault.default_text) AS sortTV\\");\\n                break;\\n        }\\n    }\\n    $criteria->sortby(\\"sortTV\\", $sortdirTV);\\n}\\nif (!empty($sortby)) {\\n    if (strpos($sortby, \'{\') === 0) {\\n        $sorts = $modx->fromJSON($sortby);\\n    } else {\\n        $sorts = array($sortby => $sortdir);\\n    }\\n    if (is_array($sorts)) {\\n        while (list($sort, $dir) = each($sorts)) {\\n            if ($sortbyEscaped) $sort = $modx->escape($sort);\\n            if (!empty($sortbyAlias)) $sort = $modx->escape($sortbyAlias) . \\".{$sort}\\";\\n            $criteria->sortby($sort, $dir);\\n        }\\n    }\\n}\\n\\n$total = $modx->getCount(\'modResource\', $criteria);\\n$modx->setPlaceholder($totalVar, $total);\\n\\n\\nif (!empty($limit)) $criteria->limit($limit, $offset);\\n\\nif (!empty($debug)) {\\n    $criteria->prepare();\\n    $modx->log(modX::LOG_LEVEL_ERROR, $criteria->toSQL());\\n}\\n$collection = $modx->getCollection(\'modResource\', $criteria, $dbCacheFlag);\\n\\n$idx = !empty($idx) && $idx !== \'0\' ? (integer) $idx : 1;\\n$first = empty($first) && $first !== \'0\' ? 1 : (integer) $first;\\n$last = empty($last) ? (count($collection) + $idx - 1) : (integer) $last;\\n\\n$maxIterations = empty($maxIterations) || (integer) $maxIterations < 1 ? 10 : (integer) $maxIterations;\\n$currentResource = $modx->resource;\\n$currentResourceIdentifier = $modx->resourceIdentifier;\\n$currentElementCache = $modx->elementCache;\\n\\n\\/** @var modResource $resource *\\/\\nforeach ($collection as $resourceId => $resource) {\\n    $odd = ($idx & 1);\\n    $properties = array_merge(\\n        $scriptProperties\\n        ,array(\\n            \'idx\' => $idx\\n            ,\'first\' => $first\\n            ,\'last\' => $last\\n        )\\n    );\\n    $resourceTpl = null;\\n    $tplidx = \'tpl_\' . $idx;\\n    if (!empty($$tplidx)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $$tplidx);\\n    }\\n    if ($idx > 1 && $resourceTpl === null) {\\n        $divisors = getDivisors($idx);\\n        if (!empty($divisors)) {\\n            foreach ($divisors as $divisor) {\\n                $tplnth = \'tpl_n\' . $divisor;\\n                if (!empty($$tplnth)) {\\n                    $resourceTpl = $modx->parser->getElement(\'modChunk\', $$tplnth);\\n                    if ($resourceTpl !== null) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    if ($idx == $first && $resourceTpl === null && !empty($tplFirst)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplFirst);\\n    }\\n    if ($idx == $last && $resourceTpl === null && !empty($tplLast)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplLast);\\n    }\\n    if ($odd && $resourceTpl === null && !empty($tplOdd)) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tplOdd);\\n    }\\n    if (!empty($tpl) && $resourceTpl === null) {\\n        $resourceTpl = $modx->parser->getElement(\'modChunk\', $tpl);\\n    }\\n\\n    $modx->resource = $resource;\\n    $modx->resourceIdentifier = $resource->get(\'id\');\\n    $modx->elementCache = array();\\n    $resourceOutput = $modx->resource->process();\\n    $modx->parser->processElementTags(\'\', $resourceOutput, true, false, \'[[\', \']]\', array(), $maxIterations);\\n    $modx->parser->processElementTags(\'\', $resourceOutput, true, true, \'[[\', \']]\', array(), $maxIterations);\\n\\n    if (empty($resourceTpl)) {\\n        $output[]= $resourceOutput;\\n    } else {\\n        $output[]= $resourceTpl->process(array_merge($properties, array(\'output\' => $resourceOutput)));\\n    }\\n    $idx++;\\n}\\n\\n$modx->elementCache = $currentElementCache;\\n$modx->resourceIdentifier = $currentResourceIdentifier;\\n$modx->resource = $currentResource;\\n\\n\\/* output *\\/\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\',$scriptProperties,false);\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->setPlaceholders($output,$toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\n$output = implode($outputSeparator, $output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;"}',
);