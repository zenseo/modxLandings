<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'fb1653d02d5e4947305af694adb2ce17' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"getImageList","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2011\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n        $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n\\n    }\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n\\nif (count($items) > 0) {\\n    $items = $offset > 0 ? array_slice($items, $offset) : $items;\\n    $count = count($items);\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $tempitems = array();\\n    for ($i = 0; $i < $limit; $i++) {\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n                $value = $tv->renderOutput($docid);\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\'=>$o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getImageList\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getImageList is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getImageList\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.4\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2009-2011\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\/\\/split json into parts\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\n\\n$modx->setPlaceholder(\'docid\', $docid);\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\n\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\n        if (!empty($migx->config[\'configs\'])) {\\n            $migx->loadConfigs();\\n            \\/\\/ get tabs from file or migx-config-table\\n            $formtabs = $migx->getTabs();\\n        }\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        if (!empty($properties[\'basePath\'])) {\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\n            } else {\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\n            }\\n        }\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\n            $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n        }\\n        $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n\\n    }\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n\\n}\\n\\nif (empty($outputvalue)) {\\n    return \'\';\\n}\\n\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\n\\n\\n$items = $modx->fromJSON($outputvalue);\\n\\n\\/\\/ where filter\\nif (is_array($where) && count($where) > 0) {\\n    $items = $migx->filterItems($where, $items);\\n}\\n$modx->setPlaceholder($totalVar, count($items));\\n\\n\\nif (!empty($reverse)) {\\n    $items = array_reverse($items);\\n}\\n\\n\\n\\/\\/ sort items\\nif (is_array($sort) && count($sort) > 0) {\\n    $items = $migx->sortDbResult($items, $sort);\\n}\\n\\n\\nif (count($items) > 0) {\\n    $items = $offset > 0 ? array_slice($items, $offset) : $items;\\n    $count = count($items);\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\n    \\/\\/preselect important items\\n    $preitems = array();\\n    if ($randomize && $preselectLimit > 0) {\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\n            $preitems[] = $items[$i];\\n            unset($items[$i]);\\n        }\\n        $limit = $limit - count($preitems);\\n    }\\n\\n    \\/\\/shuffle items\\n    if ($randomize) {\\n        shuffle($items);\\n    }\\n\\n    \\/\\/limit items\\n    $tempitems = array();\\n    for ($i = 0; $i < $limit; $i++) {\\n        $tempitems[] = $items[$i];\\n    }\\n    $items = $tempitems;\\n\\n    \\/\\/add preselected items and schuffle again\\n    if ($randomize && $preselectLimit > 0) {\\n        $items = array_merge($preitems, $items);\\n        shuffle($items);\\n    }\\n\\n    $properties = array();\\n    foreach ($scriptProperties as $property => $value) {\\n        $properties[\'property.\' . $property] = $value;\\n    }\\n\\n    $idx = 0;\\n    $output = array();\\n    $template = array();\\n    $count = count($items);\\n\\n    foreach ($items as $key => $item) {\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\n        $fields = array();\\n        foreach ($item as $field => $value) {\\n            if (is_array($value)) {\\n                if (is_array($value[0])) {\\n                    \\/\\/nested array - convert to json\\n                    $value = $modx->toJson($value);\\n                } else {\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\n                }\\n            }\\n\\n\\n            $inputTVkey = $formname . $field;\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\n\\n                } else {\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\n                }\\n                $inputTV = $inputTvs[$inputTVkey];\\n\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n                \\/\\/don\'t manipulate any urls here\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n                $tv->set(\'default_text\', $value);\\n                $value = $tv->renderOutput($docid);\\n                \\/\\/set option back\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n                \\/\\/now manipulate urls\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                    $mTypes = explode(\',\', $mTypes);\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                    }\\n                }\\n\\n            }\\n            $fields[$field] = $value;\\n\\n        }\\n\\n        if (!empty($addfields)) {\\n            foreach ($addfields as $addfield) {\\n                $addfield = explode(\':\', $addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault;\\n            }\\n        }\\n\\n        if (!empty($sumFields)) {\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\n            foreach ($sumFields as $sumField) {\\n                if (isset($fields[$sumField])) {\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\n                }\\n            }\\n        }\\n\\n\\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = \'\';\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\n                $rowtpl = $tplFirst;\\n            }\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\n                $rowtpl = $tplLast;\\n            }\\n            $tplidx = \'tpl_\' . $idx;\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\n                $rowtpl = $$tplidx;\\n            }\\n            if ($idx > 1 && empty($rowtpl)) {\\n                $divisors = $migx->getDivisors($idx);\\n                if (!empty($divisors)) {\\n                    foreach ($divisors as $divisor) {\\n                        $tplnth = \'tpl_n\' . $divisor;\\n                        if (!empty($$tplnth)) {\\n                            $rowtpl = $$tplnth;\\n                            if (!empty($rowtpl)) {\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if ($count == 1 && isset($tpl_oneresult)) {\\n                $rowtpl = $tpl_oneresult;\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if (!empty($rowtpl)) {\\n                $template = $migx->getTemplate($tpl, $template);\\n                $fields[\'_tpl\'] = $template[$tpl];\\n            } else {\\n                $rowtpl = $tpl;\\n\\n            }\\n            $template = $migx->getTemplate($rowtpl, $template);\\n\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n\\n\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\nif (count($summaries) > 0) {\\n    $modx->toPlaceholders($summaries);\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\n\\nif ($count > 0 && $splits > 0) {\\n    $size = ceil($count \\/ $splits);\\n    $chunks = array_chunk($output, $size);\\n    $output = array();\\n    foreach ($chunks as $chunk) {\\n        $o = implode($outputSeparator, $chunk);\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\'=>$o));\\n    }\\n    $outputSeparator = $splitSeparator;\\n}\\n\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'd22ba7de4271964aef6c8bcfed46ecc6',
        'native_key' => 1,
        'signature' => 'd08accb9726e7a1b680e2147e92ace12',
      ),
      'a0dd0cbfb3b7a6b3767e9b3e233dab13' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"migxGetRelations","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\n\\n$packageName = \'resourcerelations\';\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = \'rrResourceRelation\';\\n$output = \'\';\\n\\nforeach ($parentIDs as $id) {\\n    if (!empty($id)) {\\n        $output = \'\';\\n                \\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\n        $c->select($modx->getSelectColumns($classname, $classname));\\n\\n        if (!empty($sourceWhere)) {\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\n            if (is_array($sourceWhere_ar)) {\\n                $where = array();\\n                foreach ($sourceWhere_ar as $key => $value) {\\n                    $where[\'Source.\' . $key] = $value;\\n                }\\n                $joinclass = \'modResource\';\\n                $joinalias = \'Source\';\\n                $selectfields = \'id\';\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n                $c->leftjoin($joinclass, $joinalias);\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\n                $c->where($where);\\n            }\\n        }\\n\\n        \\/\\/$c->prepare(); echo $c->toSql();\\n        if ($c->prepare() && $c->stmt->execute()) {\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\n        }\\n        \\n        foreach ($collection as $row) {\\n            $ids[] = $row[\'source_id\'];\\n        }\\n        $output = implode($outputSeparator, $ids);\\n    }\\n    if (!empty($output)){\\n        break;\\n    }\\n}\\n\\n\\nif (!empty($element)) {\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\n        return $modx->runSnippet($element, $scriptProperties);\\n    } else {\\n        $scriptProperties[\'resources\'] = $output;\\n        $scriptProperties[\'parents\'] = \'9999999\';\\n        return $modx->runSnippet($element, $scriptProperties);\\n    }\\n\\n\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
        'guid' => '5c688cd2deabc8eb65984268750562b8',
        'native_key' => 2,
        'signature' => '089a942c82bb514433d99943e5b98ad8',
      ),
      '8b0c1dd13d73f4b4c3a2a4e06e5691e2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"migx","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\nif (!empty($tvname))\\n{\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\n    {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\n        if (!empty($cfgs)){\\n            $cfgs = explode(\',\',$cfgs);\\n            $configs = array_merge($configs,$cfgs);\\n           \\n        }\\n        \\n    }\\n}\\n\\n\\n\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\n\\n\\n\\n\\/\\/ get tabs from file or migx-config-table\\n$formtabs = $migx->getTabs();\\nif (empty($formtabs))\\n{\\n    \\/\\/try to get formtabs and its fields from properties\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n}\\n\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\n{\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\n}\\n\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\n\\/*\\n*   get inputTvs \\n*\\/\\n$inputTvs = array();\\nif (is_array($formtabs))\\n{\\n\\n    \\/\\/multiple different Forms\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\n}\\n\\nif ($tv)\\n{\\n    $migx->source = $tv->getSource($migx->working_context, false);\\n}\\n\\n\\/\\/$task = $modx->migx->getTask();\\n$filename = \'getlist.php\';\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\n$filenames = array();\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\n{\\n    include ($processor_file);\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\n}\\n\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value)\\n{\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\nforeach ($items as $key => $item)\\n{\\n\\n    $fields = array();\\n    foreach ($item as $field => $value)\\n    {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field]))\\n        {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\n            {\\n\\n            } else\\n            {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\n            {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\n                {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n    if ($toJsonPlaceholder)\\n    {\\n        $output[] = $fields;\\n    } else\\n    {\\n        $fields[\'_alt\'] = $idx % 2;\\n        $idx++;\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n        $fields[\'idx\'] = $idx;\\n        $rowtpl = $tpl;\\n        \\/\\/get changing tpls from field\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\n        {\\n            $tplField = substr($tpl, 7);\\n            $rowtpl = $fields[$tplField];\\n        }\\n\\n        if (!isset($template[$rowtpl]))\\n        {\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\n            {\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\n            {\\n                $template[$rowtpl] = substr($tpl, 6);\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\n            {\\n                $template[$rowtpl] = $chunk->getContent();\\n            } else\\n            {\\n                $template[$rowtpl] = false;\\n            }\\n        }\\n\\n        $fields = array_merge($fields, $properties);\\n\\n        if ($template[$rowtpl])\\n        {\\n            $chunk = $modx->newObject(\'modChunk\');\\n            $chunk->setCacheable(false);\\n            $chunk->setContent($template[$rowtpl]);\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n            } else\\n            {\\n                $output[] = $chunk->process($fields);\\n            }\\n        } else\\n        {\\n            if (!empty($placeholdersKeyField))\\n            {\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            } else\\n            {\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\nif ($toJsonPlaceholder)\\n{\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders))\\n{\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output))\\n{\\n    $o = implode($outputSeparator, $output);\\n} else\\n{\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder))\\n{\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'f7f8c574d2f0e49f6223e8c760643646',
        'native_key' => 3,
        'signature' => '7eb915c5241bf2d7ff87dd628ccdfe1d',
      ),
      '12003f8add45eb5fb48b32b5b5ba07c5' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"migxLoopCollection","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$queries = $modx->getOption(\'queries\', $scriptProperties, \'\');\\n$queries = !empty($queries) ? $modx->fromJSON($queries) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = explode(\',\', $configs);\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\n\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\'); \\n$joins = $modx->getOption(\'joins\', $scriptProperties, \'\');\\n$joins = !empty($joins) ? $modx->fromJson($joins) : false;\\n\\n$selectfields = $modx->getOption(\'selectfields\', $scriptProperties, \'\');\\n$selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = $scriptProperties[\'classname\'];\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', $selectfields));\\n\\nif ($joins) {\\n    $migx->prepareJoins($classname, $joins, $c);\\n}\\n\\nif (!empty($where)) {\\n    $c->where($where);\\n}\\n\\nif (!empty($queries)) {\\n    foreach ($queries as $key => $query) {\\n        $c->where($query, $key);\\n    }\\n\\n}\\n\\nif (!empty($groupby)) {\\n    $c->groupby($groupby);\\n}\\n\\n\\/\\/set \\"total\\" placeholder for getPage\\n$total = $modx->getCount($classname, $c);\\n$modx->setPlaceholder($totalVar, $total);\\n\\nif (is_array($sortConfig)) {\\n    foreach ($sortConfig as $sort) {\\n        $sortby = $sort[\'sortby\'];\\n        $sortdir = isset($sort[\'sortdir\']) ? $sort[\'sortdir\'] : \'ASC\';\\n        $c->sortby($sortby, $sortdir);\\n    }\\n}\\n\\n\\/\\/&limit, &offset\\nif (!empty($limit)) {\\n    $c->limit($limit, $offset);\\n}\\n\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    foreach ($collection as $object) {\\n        $fields = $object->toArray(\'\', false, true);\\n        \\n        if (!empty($addfields)){\\n            foreach ($addfields as $addfield){\\n                $addfield = explode(\':\',$addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault; \\n            }\\n        }\\n        \\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\n\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$queries = $modx->getOption(\'queries\', $scriptProperties, \'\');\\n$queries = !empty($queries) ? $modx->fromJSON($queries) : array();\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\n$configs = explode(\',\', $configs);\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\n\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\'); \\n$joins = $modx->getOption(\'joins\', $scriptProperties, \'\');\\n$joins = !empty($joins) ? $modx->fromJson($joins) : false;\\n\\n$selectfields = $modx->getOption(\'selectfields\', $scriptProperties, \'\');\\n$selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\n\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\n\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\n$modelpath = $packagepath . \'model\\/\';\\n\\n$modx->addPackage($packageName, $modelpath, $prefix);\\n$classname = $scriptProperties[\'classname\'];\\n\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n\\/\\/$modx->migx = &$migx;\\n$defaultcontext = \'web\';\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$idx = 0;\\n$output = array();\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', $selectfields));\\n\\nif ($joins) {\\n    $migx->prepareJoins($classname, $joins, $c);\\n}\\n\\nif (!empty($where)) {\\n    $c->where($where);\\n}\\n\\nif (!empty($queries)) {\\n    foreach ($queries as $key => $query) {\\n        $c->where($query, $key);\\n    }\\n\\n}\\n\\nif (!empty($groupby)) {\\n    $c->groupby($groupby);\\n}\\n\\n\\/\\/set \\"total\\" placeholder for getPage\\n$total = $modx->getCount($classname, $c);\\n$modx->setPlaceholder($totalVar, $total);\\n\\nif (is_array($sortConfig)) {\\n    foreach ($sortConfig as $sort) {\\n        $sortby = $sort[\'sortby\'];\\n        $sortdir = isset($sort[\'sortdir\']) ? $sort[\'sortdir\'] : \'ASC\';\\n        $c->sortby($sortby, $sortdir);\\n    }\\n}\\n\\n\\/\\/&limit, &offset\\nif (!empty($limit)) {\\n    $c->limit($limit, $offset);\\n}\\n\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    foreach ($collection as $object) {\\n        $fields = $object->toArray(\'\', false, true);\\n        \\n        if (!empty($addfields)){\\n            foreach ($addfields as $addfield){\\n                $addfield = explode(\':\',$addfield);\\n                $addname = $addfield[0];\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\n                $fields[$addname] = $adddefault; \\n            }\\n        }\\n        \\n        if ($toJsonPlaceholder) {\\n            $output[] = $fields;\\n        } else {\\n            $fields[\'_alt\'] = $idx % 2;\\n            $idx++;\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\n            $fields[\'idx\'] = $idx;\\n            $rowtpl = $tpl;\\n            \\/\\/get changing tpls from field\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n                $tplField = substr($tpl, 7);\\n                $rowtpl = $fields[$tplField];\\n            }\\n\\n            if (!isset($template[$rowtpl])) {\\n                if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n                    $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n                } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n                    $template[$rowtpl] = substr($tpl, 6);\\n                } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n                    $template[$rowtpl] = $chunk->getContent();\\n                } else {\\n                    $template[$rowtpl] = false;\\n                }\\n            }\\n\\n            $fields = array_merge($fields, $properties);\\n\\n            if ($template[$rowtpl]) {\\n                $chunk = $modx->newObject(\'modChunk\');\\n                $chunk->setCacheable(false);\\n                $chunk->setContent($template[$rowtpl]);\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\n                } else {\\n                    $output[] = $chunk->process($fields);\\n                }\\n            } else {\\n                if (!empty($placeholdersKeyField)) {\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                } else {\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n                }\\n            }\\n        }\\n\\n\\n    }\\n}\\n\\n\\nif ($toJsonPlaceholder) {\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\n    return \'\';\\n}\\n\\nif (!empty($toSeparatePlaceholders)) {\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\n    return \'\';\\n}\\n\\/*\\nif (!empty($outerTpl))\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\nelse \\n*\\/\\nif (is_array($output)) {\\n    $o = implode($outputSeparator, $output);\\n} else {\\n    $o = $output;\\n}\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $o);\\n    return \'\';\\n}\\n\\nreturn $o;"}',
        'guid' => 'ba334c82eb8f52d8e75199d7b8bc20b9',
        'native_key' => 4,
        'signature' => 'ef0920dd855687f52f0c0476b072faa9',
      ),
      '893935bb8004c30605b251ed4e427950' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":5,"source":0,"property_preprocess":0,"name":"migxResourceMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createfolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $parentids = $modx->getParentIds($docid);\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n\\n    } else {\\n        $path = str_replace(\'{id}\', $docid, $path);\\n        $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n        $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n        $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n        $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n        if (!@mkdir($fullpath, 0755, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}\\n\\n\\/*EOF*\\/","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name migxResourceMediaPath\\n * @description Dynamically calculates the upload path for a given resource\\n * \\n * This Snippet is meant to dynamically calculate your baseBath attribute\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\n * have its own images that page 456 could not reference.\\n *\\n * USAGE:\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\n *\\n * PARAMETERS\\n * &pathTpl string formatting string specifying the file path. \\n *\\t\\tRelative to MODX base_path\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\n * &docid (optional) integer page id\\n * &createfolder (optional) boolean whether or not to create\\n *\\/\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\n$path = \'\';\\n$createpath = false;\\n\\nif (empty($pathTpl)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: pathTpl not specified.\');\\n    return;\\n}\\n\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\n    \\/\\/ placeholder was set by some script\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\n    $docid = $modx->getPlaceholder(\'docid\');\\n}\\nif (empty($docid)) {\\n\\n    \\/\\/on frontend\\n    if (is_object($modx->resource)) {\\n        $docid = $modx->resource->get(\'id\');\\n    }\\n    \\/\\/on backend\\n    else {\\n        $createpath = $createfolder;\\n        \\/\\/ We do this to read the &id param from an Ajax request\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\n\\n        if (isset($parsedQuery[\'amp;id\'])) {\\n            $docid = (int)$parsedQuery[\'amp;id\'];\\n        } elseif (isset($parsedQuery[\'id\'])) {\\n            $docid = (int)$parsedQuery[\'id\'];\\n        }\\n    }\\n}\\n\\nif (empty($docid)) {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, \'[migxResourceMediaPath]: docid could not be determined.\');\\n    return;\\n}\\n\\nif ($resource = $modx->getObject(\'modResource\', $docid)) {\\n    $path = $pathTpl;\\n    $ultimateParent = \'\';\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\n        $parentids = $modx->getParentIds($docid);\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\n        if (count($parentids) > 1) {\\n            $parentids = array_reverse($parentids);\\n            $parentids[] = $docid;\\n            $ultimateParent = $parentids[1];\\n        } else {\\n            $ultimateParent = $docid;\\n            $parentids = array();\\n            $parentids[] = $docid;\\n        }\\n    }\\n\\n    if (strstr($path, \'{breadcrumb}\')) {\\n        $breadcrumbpath = \'\';\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\n        }\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\n\\n    } else {\\n        $path = str_replace(\'{id}\', $docid, $path);\\n        $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\n        $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\n        $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\n        $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\n    }\\n\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\n\\n    if ($createpath && !file_exists($fullpath)) {\\n        if (!@mkdir($fullpath, 0755, true)) {\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\n        }\\n    }\\n\\n    return $path;\\n} else {\\n    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\n    return;\\n}\\n\\n\\/*EOF*\\/"}',
        'guid' => '4b98af64184f76bd5c0da44bb271d984',
        'native_key' => 5,
        'signature' => '0d98ed26ceea24ae6d0e7c10f46a05fc',
      ),
      '06cb9e2c6c51d80671cc97d7ae2481e2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":6,"source":0,"property_preprocess":0,"name":"migxImageUpload","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';"}',
        'guid' => 'b1700616630a3beba3adceff288d7f8f',
        'native_key' => 6,
        'signature' => 'c964a2ac10174c878693f304103a68f8',
      ),
      '32311fd5f0e7f623ae0f480814f1cc0e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":7,"source":0,"property_preprocess":0,"name":"migxChunklistToJson","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\n\\n$classname = \'modChunk\';\\n$rows = array();\\n$output = \'\';\\n\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', array(\'id\', \'name\')));\\n$c->sortby(\'name\');\\n\\nif (!empty($category)) {\\n    $c->where(array(\'category\' => $category));\\n}\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    $i = 0;\\n\\n    switch ($format) {\\n        case \'json\':\\n            foreach ($collection as $object) {\\n                $row[\'MIGX_id\'] = (string )$i;\\n                $row[\'name\'] = $object->get(\'name\');\\n                $row[\'selected\'] = \'0\';\\n                $rows[] = $row;\\n                $i++;\\n            }\\n            $output = $modx->toJson($rows);\\n            break;\\n        \\n        case \'optionlist\':\\n            foreach ($collection as $object) {\\n                $rows[] = $object->get(\'name\');\\n                $i++;\\n            }\\n            $output = implode(\'||\',$rows);      \\n        break;\\n            \\n    }\\n\\n\\n}\\n\\nreturn $output;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\n\\n$classname = \'modChunk\';\\n$rows = array();\\n$output = \'\';\\n\\n$c = $modx->newQuery($classname);\\n$c->select($modx->getSelectColumns($classname, $classname, \'\', array(\'id\', \'name\')));\\n$c->sortby(\'name\');\\n\\nif (!empty($category)) {\\n    $c->where(array(\'category\' => $category));\\n}\\n\\/\\/$c->prepare();echo $c->toSql();\\nif ($collection = $modx->getCollection($classname, $c)) {\\n    $i = 0;\\n\\n    switch ($format) {\\n        case \'json\':\\n            foreach ($collection as $object) {\\n                $row[\'MIGX_id\'] = (string )$i;\\n                $row[\'name\'] = $object->get(\'name\');\\n                $row[\'selected\'] = \'0\';\\n                $rows[] = $row;\\n                $i++;\\n            }\\n            $output = $modx->toJson($rows);\\n            break;\\n        \\n        case \'optionlist\':\\n            foreach ($collection as $object) {\\n                $rows[] = $object->get(\'name\');\\n                $i++;\\n            }\\n            $output = implode(\'||\',$rows);      \\n        break;\\n            \\n    }\\n\\n\\n}\\n\\nreturn $output;"}',
        'guid' => 'ee1ca351bca08bdb9f96ce7eb8c61354',
        'native_key' => 7,
        'signature' => '7b60a6d8768d4296e73817d72abc89cd',
      ),
      'b71d9fb538ad0a34e8a4bd0bdc2dcba1' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":8,"source":0,"property_preprocess":0,"name":"migxSwitchDetailChunk","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\n\\n\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\n\\nif (!empty($properties[\'migx_id\'])){\\n    $output = $modx->getChunk($detailChunk,$properties);\\n}\\nelse{\\n    $output = $modx->getChunk($listingChunk);\\n}\\n\\nreturn $output;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\n\\n\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\n\\nif (!empty($properties[\'migx_id\'])){\\n    $output = $modx->getChunk($detailChunk,$properties);\\n}\\nelse{\\n    $output = $modx->getChunk($listingChunk);\\n}\\n\\nreturn $output;"}',
        'guid' => '197e642096cb6b71a13a1f021d9b3d69',
        'native_key' => 8,
        'signature' => '405f98bb35bd4a5d03132ea10088f658',
      ),
      '0d9069a297d17201cd27af5219f4b486' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":9,"source":0,"property_preprocess":0,"name":"getSwitchColumnCol","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$scriptProperties = $_REQUEST;\\n$col = \'\';\\n\\/\\/ special actions, for example the showSelector - action\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\n\\nif (!empty($tempParams)) {\\n    $tempParams = $modx->fromJson($tempParams);\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\n}\\n\\nreturn $col;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$scriptProperties = $_REQUEST;\\n$col = \'\';\\n\\/\\/ special actions, for example the showSelector - action\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\n\\nif (!empty($tempParams)) {\\n    $tempParams = $modx->fromJson($tempParams);\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\n}\\n\\nreturn $col;"}',
        'guid' => 'e8ca0969428f5beac1020718ee4448a5',
        'native_key' => 9,
        'signature' => '7c8c0a9c9446728f1387505bbcae629b',
      ),
      '5ad1aeea60a70ba73fb5fbe8942f9f1d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":10,"source":0,"property_preprocess":0,"name":"getDayliMIGXrecord","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getDayliMIGXrecord\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getDayliMIGXrecord\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2012\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        \\/\\/$tv->setCacheable(false);\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\n        \\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\n            \'tmplvarid\' => $tv->get(\'id\'),\\n            \'contentid\' => $docid,\\n            ));\\n\\n\\n        $outputvalue = $tvresource->get(\'value\');\\n        \\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        $migx->source = $tv->getSource($migx->working_context, false);\\n\\n        if (empty($outputvalue)) {\\n            return \'\';\\n        }\\n\\n        $items = $modx->fromJSON($outputvalue);\\n\\n\\n        \\/\\/is there an active item for the current date?\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\n        $activewhere = array();\\n        $activewhere[\'activedate\'] = $activedate;\\n        $activewhere[\'activated\'] = \'1\';\\n        $activeitems = $migx->filterItems($activewhere, $items);\\n\\n        if (count($activeitems) == 0) {\\n\\n            $activeitems = array();\\n            \\/\\/ where filter\\n            if (is_array($where) && count($where) > 0) {\\n                $items = $migx->filterItems($where, $items);\\n            }\\n\\n            $tempitems = array();\\n            $count = count($items);\\n            $emptycount = 0;\\n            $latestdate = $activedate;\\n            $nextdate = strtotime($latestdate);\\n            foreach ($items as $item) {\\n                \\/\\/empty all dates and active-states which are older than today\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\n                    $item[\'activated\'] = \'0\';\\n                    $item[\'activedate\'] = \'\';\\n                }\\n                if (empty($item[\'activedate\'])) {\\n                    $emptycount++;\\n                }\\n                if ($item[\'activedate\'] > $latestdate) {\\n                    $latestdate = $item[\'activedate\'];\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\n                }\\n                if ($item[\'activedate\'] == $activedate) {\\n                    $item[\'activated\'] = \'1\';\\n                    $activeitems[] = $item;\\n                }\\n                $tempitems[] = $item;\\n            }\\n\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\n\\n            $items = $tempitems;\\n\\n\\n            \\/\\/are there more than half of all items with empty activedates\\n\\n            if ($emptycount >= $count \\/ 2) {\\n\\n                \\/\\/ sort items\\n                if (is_array($sort) && count($sort) > 0) {\\n                    $items = $migx->sortDbResult($items, $sort);\\n                }\\n                if (count($items) > 0) {\\n                    \\/\\/shuffle items\\n                    if ($randomize) {\\n                        shuffle($items);\\n                    }\\n                }\\n\\n                $tempitems = array();\\n                foreach ($items as $item) {\\n                    if (empty($item[\'activedate\'])) {\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\n                        if ($item[\'activedate\'] == $activedate) {\\n                            $item[\'activated\'] = \'1\';\\n                            $activeitems[] = $item;\\n                        }\\n                    }\\n\\n                    $tempitems[] = $item;\\n                }\\n\\n                $items = $tempitems;\\n            }\\n\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\n            \\/\\/echo $modx->toJson($items);\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\n\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\n\\n            $tv->setValue($docid, $modx->toJson($items));\\n            $tv->save();\\n\\n        }\\n    }\\n\\n}\\n\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$output = \'\';\\n\\nforeach ($activeitems as $key => $item) {\\n\\n    $fields = array();\\n    foreach ($item as $field => $value) {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field])) {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n            } else {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n\\n    $rowtpl = $tpl;\\n    \\/\\/get changing tpls from field\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n        $tplField = substr($tpl, 7);\\n        $rowtpl = $fields[$tplField];\\n    }\\n\\n    if (!isset($template[$rowtpl])) {\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n            $template[$rowtpl] = substr($tpl, 6);\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n            $template[$rowtpl] = $chunk->getContent();\\n        } else {\\n            $template[$rowtpl] = false;\\n        }\\n    }\\n\\n    $fields = array_merge($fields, $properties);\\n\\n    if ($template[$rowtpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$rowtpl]);\\n        $output .= $chunk->process($fields);\\n\\n    } else {\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n\\n    }\\n\\n\\n}\\n\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getDayliMIGXrecord\\n *\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\n *\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\n * Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package migx\\n *\\/\\n\\/**\\n * getDayliMIGXrecord\\n *\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\n *\\n * @version 1.0\\n * @author Bruno Perner <b.perner@gmx.de>\\n * @copyright Copyright &copy; 2012\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\n * version 2 or (at your option) any later version.\\n * @package migx\\n *\\/\\n\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\n\\/* get default properties *\\/\\n\\n\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\n\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\nif (!($migx instanceof Migx))\\n    return \'\';\\n$migx->working_context = $modx->resource->get(\'context_key\');\\n\\nif (!empty($tvname)) {\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\n\\n        \\/*\\n        *   get inputProperties\\n        *\\/\\n\\n\\n        $properties = $tv->get(\'input_properties\');\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\n\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\n        $migx->loadConfigs();\\n        \\/\\/ get tabs from file or migx-config-table\\n        $formtabs = $migx->getTabs();\\n        if (empty($formtabs)) {\\n            \\/\\/try to get formtabs and its fields from properties\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\n        }\\n\\n        \\/\\/$tv->setCacheable(false);\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\n        \\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\n            \'tmplvarid\' => $tv->get(\'id\'),\\n            \'contentid\' => $docid,\\n            ));\\n\\n\\n        $outputvalue = $tvresource->get(\'value\');\\n        \\n        \\/*\\n        *   get inputTvs \\n        *\\/\\n        $inputTvs = array();\\n        if (is_array($formtabs)) {\\n\\n            \\/\\/multiple different Forms\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\n        }\\n        $migx->source = $tv->getSource($migx->working_context, false);\\n\\n        if (empty($outputvalue)) {\\n            return \'\';\\n        }\\n\\n        $items = $modx->fromJSON($outputvalue);\\n\\n\\n        \\/\\/is there an active item for the current date?\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\n        $activewhere = array();\\n        $activewhere[\'activedate\'] = $activedate;\\n        $activewhere[\'activated\'] = \'1\';\\n        $activeitems = $migx->filterItems($activewhere, $items);\\n\\n        if (count($activeitems) == 0) {\\n\\n            $activeitems = array();\\n            \\/\\/ where filter\\n            if (is_array($where) && count($where) > 0) {\\n                $items = $migx->filterItems($where, $items);\\n            }\\n\\n            $tempitems = array();\\n            $count = count($items);\\n            $emptycount = 0;\\n            $latestdate = $activedate;\\n            $nextdate = strtotime($latestdate);\\n            foreach ($items as $item) {\\n                \\/\\/empty all dates and active-states which are older than today\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\n                    $item[\'activated\'] = \'0\';\\n                    $item[\'activedate\'] = \'\';\\n                }\\n                if (empty($item[\'activedate\'])) {\\n                    $emptycount++;\\n                }\\n                if ($item[\'activedate\'] > $latestdate) {\\n                    $latestdate = $item[\'activedate\'];\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\n                }\\n                if ($item[\'activedate\'] == $activedate) {\\n                    $item[\'activated\'] = \'1\';\\n                    $activeitems[] = $item;\\n                }\\n                $tempitems[] = $item;\\n            }\\n\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\n\\n            $items = $tempitems;\\n\\n\\n            \\/\\/are there more than half of all items with empty activedates\\n\\n            if ($emptycount >= $count \\/ 2) {\\n\\n                \\/\\/ sort items\\n                if (is_array($sort) && count($sort) > 0) {\\n                    $items = $migx->sortDbResult($items, $sort);\\n                }\\n                if (count($items) > 0) {\\n                    \\/\\/shuffle items\\n                    if ($randomize) {\\n                        shuffle($items);\\n                    }\\n                }\\n\\n                $tempitems = array();\\n                foreach ($items as $item) {\\n                    if (empty($item[\'activedate\'])) {\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\n                        if ($item[\'activedate\'] == $activedate) {\\n                            $item[\'activated\'] = \'1\';\\n                            $activeitems[] = $item;\\n                        }\\n                    }\\n\\n                    $tempitems[] = $item;\\n                }\\n\\n                $items = $tempitems;\\n            }\\n\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\n            \\/\\/echo $modx->toJson($items);\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\n\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\n\\n            $tv->setValue($docid, $modx->toJson($items));\\n            $tv->save();\\n\\n        }\\n    }\\n\\n}\\n\\n\\n$properties = array();\\nforeach ($scriptProperties as $property => $value) {\\n    $properties[\'property.\' . $property] = $value;\\n}\\n\\n$output = \'\';\\n\\nforeach ($activeitems as $key => $item) {\\n\\n    $fields = array();\\n    foreach ($item as $field => $value) {\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\n        if ($processTVs && isset($inputTvs[$field])) {\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\n\\n            } else {\\n                $tv = $modx->newObject(\'modTemplateVar\');\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\n            }\\n            $inputTV = $inputTvs[$field];\\n\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\n            \\/\\/don\'t manipulate any urls here\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\n            $tv->set(\'default_text\', $value);\\n            $value = $tv->renderOutput($docid);\\n            \\/\\/set option back\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\n            \\/\\/now manipulate urls\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\n                $mTypes = explode(\',\', $mTypes);\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\n                }\\n            }\\n\\n        }\\n        $fields[$field] = $value;\\n\\n    }\\n\\n    $rowtpl = $tpl;\\n    \\/\\/get changing tpls from field\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\n        $tplField = substr($tpl, 7);\\n        $rowtpl = $fields[$tplField];\\n    }\\n\\n    if (!isset($template[$rowtpl])) {\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\n            $template[$rowtpl] = substr($tpl, 6);\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\n            $template[$rowtpl] = $chunk->getContent();\\n        } else {\\n            $template[$rowtpl] = false;\\n        }\\n    }\\n\\n    $fields = array_merge($fields, $properties);\\n\\n    if ($template[$rowtpl]) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $chunk->setContent($template[$rowtpl]);\\n        $output .= $chunk->process($fields);\\n\\n    } else {\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\n\\n    }\\n\\n\\n}\\n\\n\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder, $output);\\n    return \'\';\\n}\\n\\nreturn $output;"}',
        'guid' => 'b5a3d405842a47cc666ce70f7d246bbe',
        'native_key' => 10,
        'signature' => 'b5c0b2e7b4951da0096bacff293e839d',
      ),
      '2760ca6a6053ab64688608125de3ed16' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":11,"source":0,"property_preprocess":0,"name":"filterbytag","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"if (!is_array($subject)) {\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\n}\\n\\nreturn (in_array($operand,$subject));","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"if (!is_array($subject)) {\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\n}\\n\\nreturn (in_array($operand,$subject));"}',
        'guid' => '45cb2abb6278ea2ceb9f990a770eaa46',
        'native_key' => 11,
        'signature' => 'd800ffe45b194561341540181a004e5b',
      ),
      '50d64b40b8f0983ebba4706686ae08c2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":12,"source":0,"property_preprocess":0,"name":"migxObjectMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\n$path = \'\';\\n$createpath = false;\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\n    \\/\\/ placeholder was set by some script on frontend for example\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\n}\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\n    $objectid = $_REQUEST[\'object_id\'];\\n}\\n\\n\\n\\nif (empty($objectid)) {\\n\\n    \\/\\/set Session - var in fields.php - processor\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\n        $createpath = !empty($createfolder);\\n    }\\n\\n}\\n\\n\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\n\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif ($createpath && !file_exists($fullpath)) {\\n    mkdir($fullpath, 0755, true);\\n}\\n\\nreturn $path;","locked":0,"properties":"","moduleguid":"","static":0,"static_file":"","content":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\n$path = \'\';\\n$createpath = false;\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\n    \\/\\/ placeholder was set by some script on frontend for example\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\n}\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\n    $objectid = $_REQUEST[\'object_id\'];\\n}\\n\\n\\n\\nif (empty($objectid)) {\\n\\n    \\/\\/set Session - var in fields.php - processor\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\n        $createpath = !empty($createfolder);\\n    }\\n\\n}\\n\\n\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\n\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\n\\nif ($createpath && !file_exists($fullpath)) {\\n    mkdir($fullpath, 0755, true);\\n}\\n\\nreturn $path;"}',
        'guid' => '3a64dc6b0002dc8a610af6433bb7559a',
        'native_key' => 12,
        'signature' => '7424ba1637f0fdfe5cd2c179181dbc9b',
      ),
    ),
    'Plugins' => 
    array (
      '4dd003f04fb9e49a46d914992c6859b2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"MIGX","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name) {\\n    case \'OnTVInputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\n        break;\\n    case \'OnTVInputPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\n        break;\\n\\n        case \'OnDocFormPrerender\':\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\n        break; \\n \\n    \\/*          \\n    case \'OnTVOutputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\n        break;\\n    case \'OnTVOutputRenderPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\n        break;\\n    \\n    case \'OnDocFormPrerender\':\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n        Ext.onReady(function() {\\n            \\n        });\\n        <\\/script>\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\n        break;\\n     *\\/\\n}\\nreturn;","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name) {\\n    case \'OnTVInputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\n        break;\\n    case \'OnTVInputPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\n        break;\\n\\n        case \'OnDocFormPrerender\':\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\n        break; \\n \\n    \\/*          \\n    case \'OnTVOutputRenderList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\n        break;\\n    case \'OnTVOutputRenderPropertiesList\':\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\n        break;\\n    \\n    case \'OnDocFormPrerender\':\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\n        Ext.onReady(function() {\\n            \\n        });\\n        <\\/script>\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\n        break;\\n     *\\/\\n}\\nreturn;"}',
        'guid' => '2c59c3a636e1c9729ac2789eb343519d',
        'native_key' => 1,
        'signature' => '7b618422891ce8f604cdbdd1522b4ac8',
      ),
      '48f490f0425912745ec87f2b542d3a9c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"MIGXquip","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name)\\n{\\n\\n    case \'OnDocFormPrerender\':\\n\\n        \\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\n        $modx->quip = new Quip($modx);\\n\\n        $modx->lexicon->load(\'quip:default\');\\n        $quipconfig = $modx->toJson($modx->quip->config);\\n        \\n        $js = \\"\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\n        console.log(Quip);\\";\\n\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\n        break;\\n\\n}\\nreturn;","locked":0,"properties":"a:0:{}","disabled":1,"moduleguid":"","static":0,"static_file":"","content":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\nswitch ($modx->event->name)\\n{\\n\\n    case \'OnDocFormPrerender\':\\n\\n        \\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\n        $modx->quip = new Quip($modx);\\n\\n        $modx->lexicon->load(\'quip:default\');\\n        $quipconfig = $modx->toJson($modx->quip->config);\\n        \\n        $js = \\"\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\n        console.log(Quip);\\";\\n\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\n        break;\\n\\n}\\nreturn;"}',
        'guid' => 'fdab36d7b45814e12b63922cfe3cb83c',
        'native_key' => 2,
        'signature' => '9f9a03bcdc5b6b0ad3f9f9f7f70f2705',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'migx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.6.4-pl\\/modCategory\\/44b5c9219bd794c8400e8cd80a398fb4\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"migx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-2.6.4-pl\\/modCategory\\/44b5c9219bd794c8400e8cd80a398fb4\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"migx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migx-2.6.4-pl\\/modCategory\\/44b5c9219bd794c8400e8cd80a398fb4.plugin.resolver.resolver","type":"php","name":"plugin.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '40c78d740136e68c50065be231e8b7ce',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '44b5c9219bd794c8400e8cd80a398fb4',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"MIGX"}',
);